<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Objects\mkp4.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Objects\mkp4.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060960: Last Updated: Wed Sep 27 15:01:46 2023
<BR><P>
<H3>Maximum Stack Usage =        224 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
__rt_entry_main &rArr; main &rArr; InitMIL1553B_RT &rArr; InitRxMIL1553B &rArr; Get_Module_Address &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[4e]">__user_initial_stackheap</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[a]">SysTick_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[a]">SysTick_Handler</a><BR>
 <LI><a href="#[b]">MIL_STD_1553B2_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[b]">MIL_STD_1553B2_IRQHandler</a><BR>
 <LI><a href="#[1a]">TIMER2_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1a]">TIMER2_IRQHandler</a><BR>
 <LI><a href="#[1b]">TIMER3_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1b]">TIMER3_IRQHandler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[1c]">ADC_IRQHandler</a> from mdr1986ve1t_it.o(i.ADC_IRQHandler) referenced from startup_mdr32f1qi.o(RESET)
 <LI><a href="#[15]">ARINC429R_IRQHandler</a> from mdr1986ve1t_it.o(i.ARINC429R_IRQHandler) referenced from startup_mdr32f1qi.o(RESET)
 <LI><a href="#[20]">ARINC429T1_IRQHandler</a> from mdr1986ve1t_it.o(i.ARINC429T1_IRQHandler) referenced from startup_mdr32f1qi.o(RESET)
 <LI><a href="#[21]">ARINC429T2_IRQHandler</a> from mdr1986ve1t_it.o(i.ARINC429T2_IRQHandler) referenced from startup_mdr32f1qi.o(RESET)
 <LI><a href="#[22]">ARINC429T3_IRQHandler</a> from mdr1986ve1t_it.o(i.ARINC429T3_IRQHandler) referenced from startup_mdr32f1qi.o(RESET)
 <LI><a href="#[23]">ARINC429T4_IRQHandler</a> from mdr1986ve1t_it.o(i.ARINC429T4_IRQHandler) referenced from startup_mdr32f1qi.o(RESET)
 <LI><a href="#[24]">BKP_IRQHandler</a> from mdr1986ve1t_it.o(i.BKP_IRQHandler) referenced from startup_mdr32f1qi.o(RESET)
 <LI><a href="#[14]">BUSY_IRQHandler</a> from mdr1986ve1t_it.o(i.BUSY_IRQHandler) referenced from startup_mdr32f1qi.o(RESET)
 <LI><a href="#[e]">CAN1_IRQHandler</a> from mdr1986ve1t_it.o(i.CAN1_IRQHandler) referenced from startup_mdr32f1qi.o(RESET)
 <LI><a href="#[f]">CAN2_IRQHandler</a> from mdr1986ve1t_it.o(i.CAN2_IRQHandler) referenced from startup_mdr32f1qi.o(RESET)
 <LI><a href="#[10]">DMA_IRQHandler</a> from mdr1986ve1t_it.o(i.DMA_IRQHandler) referenced from startup_mdr32f1qi.o(RESET)
 <LI><a href="#[1d]">ETHERNET_IRQHandler</a> from mdr1986ve1t_it.o(i.ETHERNET_IRQHandler) referenced from startup_mdr32f1qi.o(RESET)
 <LI><a href="#[25]">EXT_INT1_IRQHandler</a> from mdr1986ve1t_it.o(i.EXT_INT1_IRQHandler) referenced from startup_mdr32f1qi.o(RESET)
 <LI><a href="#[26]">EXT_INT2_IRQHandler</a> from mdr1986ve1t_it.o(i.EXT_INT2_IRQHandler) referenced from startup_mdr32f1qi.o(RESET)
 <LI><a href="#[27]">EXT_INT3_IRQHandler</a> from mdr1986ve1t_it.o(i.EXT_INT3_IRQHandler) referenced from startup_mdr32f1qi.o(RESET)
 <LI><a href="#[28]">EXT_INT4_IRQHandler</a> from mdr1986ve1t_it.o(i.EXT_INT4_IRQHandler) referenced from startup_mdr32f1qi.o(RESET)
 <LI><a href="#[7]">HardFault_Handler</a> from mdr1986ve1t_it.o(i.HardFault_Handler) referenced from startup_mdr32f1qi.o(RESET)
 <LI><a href="#[c]">MIL_STD_1553B1_IRQHandler</a> from mil1553b_rt.o(i.MIL_STD_1553B1_IRQHandler) referenced from startup_mdr32f1qi.o(RESET)
 <LI><a href="#[b]">MIL_STD_1553B2_IRQHandler</a> from startup_mdr32f1qi.o(.text) referenced from startup_mdr32f1qi.o(RESET)
 <LI><a href="#[6]">NMI_Handler</a> from mdr1986ve1t_it.o(i.NMI_Handler) referenced from startup_mdr32f1qi.o(RESET)
 <LI><a href="#[16]">POWER_IRQHandler</a> from mdr1986ve1t_it.o(i.POWER_IRQHandler) referenced from startup_mdr32f1qi.o(RESET)
 <LI><a href="#[9]">PendSV_Handler</a> from mdr1986ve1t_it.o(i.PendSV_Handler) referenced from startup_mdr32f1qi.o(RESET)
 <LI><a href="#[5]">Reset_Handler</a> from startup_mdr32f1qi.o(.text) referenced from startup_mdr32f1qi.o(RESET)
 <LI><a href="#[13]">SSP1_IRQHandler</a> from mdr1986ve1t_it.o(i.SSP1_IRQHandler) referenced from startup_mdr32f1qi.o(RESET)
 <LI><a href="#[1f]">SSP2_IRQHandler</a> from mdr1986ve1t_it.o(i.SSP2_IRQHandler) referenced from startup_mdr32f1qi.o(RESET)
 <LI><a href="#[1e]">SSP3_IRQHandler</a> from mdr1986ve1t_it.o(i.SSP3_IRQHandler) referenced from startup_mdr32f1qi.o(RESET)
 <LI><a href="#[8]">SVC_Handler</a> from mdr1986ve1t_it.o(i.SVC_Handler) referenced from startup_mdr32f1qi.o(RESET)
 <LI><a href="#[a]">SysTick_Handler</a> from startup_mdr32f1qi.o(.text) referenced from startup_mdr32f1qi.o(RESET)
 <LI><a href="#[29]">SystemInit</a> from system_mdr32f1qi.o(i.SystemInit) referenced from startup_mdr32f1qi.o(.text)
 <LI><a href="#[19]">TIMER1_IRQHandler</a> from xtick.o(i.TIMER1_IRQHandler) referenced from startup_mdr32f1qi.o(RESET)
 <LI><a href="#[1a]">TIMER2_IRQHandler</a> from startup_mdr32f1qi.o(.text) referenced from startup_mdr32f1qi.o(RESET)
 <LI><a href="#[1b]">TIMER3_IRQHandler</a> from startup_mdr32f1qi.o(.text) referenced from startup_mdr32f1qi.o(RESET)
 <LI><a href="#[18]">TIMER4_IRQHandler</a> from mdr1986ve1t_it.o(i.TIMER4_IRQHandler) referenced from startup_mdr32f1qi.o(RESET)
 <LI><a href="#[11]">UART1_IRQHandler</a> from mdr1986ve1t_it.o(i.UART1_IRQHandler) referenced from startup_mdr32f1qi.o(RESET)
 <LI><a href="#[12]">UART2_IRQHandler</a> from mdr1986ve1t_it.o(i.UART2_IRQHandler) referenced from startup_mdr32f1qi.o(RESET)
 <LI><a href="#[d]">USB_IRQHandler</a> from mdr1986ve1t_it.o(i.USB_IRQHandler) referenced from startup_mdr32f1qi.o(RESET)
 <LI><a href="#[17]">WWDG_IRQHandler</a> from mdr1986ve1t_it.o(i.WWDG_IRQHandler) referenced from startup_mdr32f1qi.o(RESET)
 <LI><a href="#[2d]">__main</a> from __main.o(!!!main) referenced from startup_mdr32f1qi.o(.text)
 <LI><a href="#[2c]">_printf_input_char</a> from _printf_char_common.o(.text) referenced from _printf_char_common.o(.text)
 <LI><a href="#[2b]">_sputc</a> from _sputc.o(.text) referenced from noretval__2sprintf.o(.text)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[2d]"></a>__main</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, __main.o(!!!main))
<BR><BR>[Calls]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[2e]"></a>__scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter))
<BR><BR>[Called By]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[30]"></a>__scatterload_rt2</STRONG> (Thumb, 52 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[87]"></a>__scatterload_rt2_thumb_only</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[88]"></a>__scatterload_null</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[31]"></a>__scatterload_copy</STRONG> (Thumb, 26 bytes, Stack size unknown bytes, __scatter_copy.o(!!handler_copy), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_copy
</UL>

<P><STRONG><a name="[89]"></a>__scatterload_zeroinit</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, __scatter_zi.o(!!handler_zi), UNUSED)

<P><STRONG><a name="[46]"></a>_printf_percent</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_percent.o(.ARM.Collect$$_printf_percent$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>

<P><STRONG><a name="[32]"></a>_printf_d</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_d.o(.ARM.Collect$$_printf_percent$$00000009))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_d &rArr; _printf_u &rArr; _printf_int_dec &rArr; _printf_int_common
</UL>
<BR>[Calls]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_u
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[33]"></a>_printf_u</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_u.o(.ARM.Collect$$_printf_percent$$0000000A))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_u &rArr; _printf_int_dec &rArr; _printf_int_common
</UL>
<BR>[Calls]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_x
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>
<BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_d
</UL>

<P><STRONG><a name="[35]"></a>_printf_x</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_x.o(.ARM.Collect$$_printf_percent$$0000000C))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = _printf_x &rArr; _printf_int_hex &rArr; _printf_int_common
</UL>
<BR>[Calls]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_percent_end
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_hex
</UL>
<BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_u
</UL>

<P><STRONG><a name="[36]"></a>_printf_percent_end</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_percent_end.o(.ARM.Collect$$_printf_percent$$00000017))
<BR><BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_x
</UL>

<P><STRONG><a name="[3b]"></a>__rt_lib_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit.o(.ARM.Collect$$libinit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_li
</UL>

<P><STRONG><a name="[8a]"></a>__rt_lib_init_alloca_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002E))

<P><STRONG><a name="[8b]"></a>__rt_lib_init_argv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002C))

<P><STRONG><a name="[8c]"></a>__rt_lib_init_atexit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001B))

<P><STRONG><a name="[8d]"></a>__rt_lib_init_clock_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000021))

<P><STRONG><a name="[8e]"></a>__rt_lib_init_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000032))

<P><STRONG><a name="[8f]"></a>__rt_lib_init_exceptions_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000030))

<P><STRONG><a name="[90]"></a>__rt_lib_init_fp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000002))

<P><STRONG><a name="[91]"></a>__rt_lib_init_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001F))

<P><STRONG><a name="[92]"></a>__rt_lib_init_getenv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000023))

<P><STRONG><a name="[93]"></a>__rt_lib_init_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000A))

<P><STRONG><a name="[94]"></a>__rt_lib_init_lc_collate_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000011))

<P><STRONG><a name="[95]"></a>__rt_lib_init_lc_ctype_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000013))

<P><STRONG><a name="[96]"></a>__rt_lib_init_lc_monetary_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000015))

<P><STRONG><a name="[97]"></a>__rt_lib_init_lc_numeric_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000017))

<P><STRONG><a name="[98]"></a>__rt_lib_init_lc_time_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000019))

<P><STRONG><a name="[99]"></a>__rt_lib_init_preinit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000004))

<P><STRONG><a name="[9a]"></a>__rt_lib_init_rand_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000E))

<P><STRONG><a name="[9b]"></a>__rt_lib_init_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000033))

<P><STRONG><a name="[9c]"></a>__rt_lib_init_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001D))

<P><STRONG><a name="[9d]"></a>__rt_lib_init_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000025))

<P><STRONG><a name="[9e]"></a>__rt_lib_init_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000C))

<P><STRONG><a name="[40]"></a>__rt_lib_shutdown</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown.o(.ARM.Collect$$libshutdown$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_ls
</UL>

<P><STRONG><a name="[9f]"></a>__rt_lib_shutdown_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000004))

<P><STRONG><a name="[a0]"></a>__rt_lib_shutdown_fini_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000002))

<P><STRONG><a name="[a1]"></a>__rt_lib_shutdown_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000009))

<P><STRONG><a name="[a2]"></a>__rt_lib_shutdown_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000011))

<P><STRONG><a name="[a3]"></a>__rt_lib_shutdown_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000012))

<P><STRONG><a name="[a4]"></a>__rt_lib_shutdown_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000C))

<P><STRONG><a name="[a5]"></a>__rt_lib_shutdown_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000006))

<P><STRONG><a name="[a6]"></a>__rt_lib_shutdown_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000E))

<P><STRONG><a name="[2f]"></a>__rt_entry</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry.o(.ARM.Collect$$rtentry$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_rt2
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[a7]"></a>__rt_entry_presh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000002))

<P><STRONG><a name="[38]"></a>__rt_entry_sh</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry4.o(.ARM.Collect$$rtentry$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_entry_sh &rArr; __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[3a]"></a>__rt_entry_li</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000A))
<BR><BR>[Calls]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init
</UL>

<P><STRONG><a name="[a8]"></a>__rt_entry_postsh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000009))

<P><STRONG><a name="[3c]"></a>__rt_entry_main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + Unknown Stack Size
<LI>Call Chain = __rt_entry_main &rArr; main &rArr; InitMIL1553B_RT &rArr; InitRxMIL1553B &rArr; Get_Module_Address &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[a9]"></a>__rt_entry_postli_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000C))

<P><STRONG><a name="[50]"></a>__rt_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit.o(.ARM.Collect$$rtexit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[3f]"></a>__rt_exit_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000003))
<BR><BR>[Calls]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown
</UL>

<P><STRONG><a name="[aa]"></a>__rt_exit_prels_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000002))

<P><STRONG><a name="[41]"></a>__rt_exit_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>

<P><STRONG><a name="[6d]"></a>__aeabi_memcpy4</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, rt_memcpy.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Module_Address
</UL>

<P><STRONG><a name="[ab]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memcpy.o(.emb_text), UNUSED)

<P><STRONG><a name="[5]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_mdr32f1qi.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr32f1qi.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>SysTick_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mdr32f1qi.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr32f1qi.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>MIL_STD_1553B2_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mdr32f1qi.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MIL_STD_1553B2_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MIL_STD_1553B2_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr32f1qi.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>TIMER2_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mdr32f1qi.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER2_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER2_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr32f1qi.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>TIMER3_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mdr32f1qi.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER3_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER3_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr32f1qi.o(RESET)
</UL>
<P><STRONG><a name="[4e]"></a>__user_initial_stackheap</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup_mdr32f1qi.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[43]"></a>__2sprintf</STRONG> (Thumb, 36 bytes, Stack size 32 bytes, noretval__2sprintf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>
<BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MIL_STD_1553B1_IRQHandler
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitRxMIL1553B
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Module_Address
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[45]"></a>__printf</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, __printf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_percent
</UL>
<BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>

<P><STRONG><a name="[34]"></a>_printf_int_dec</STRONG> (Thumb, 90 bytes, Stack size 32 bytes, _printf_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = _printf_int_dec &rArr; _printf_int_common
</UL>
<BR>[Calls]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_udiv10
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_unsigned (Weak Reference)
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_signed (Weak Reference)
</UL>
<BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_u
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_d
</UL>

<P><STRONG><a name="[37]"></a>_printf_int_hex</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, _printf_hex_int.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _printf_int_hex &rArr; _printf_int_common
</UL>
<BR>[Calls]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_unsigned (Weak Reference)
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_x
</UL>

<P><STRONG><a name="[ac]"></a>_printf_longlong_hex</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, _printf_hex_int.o(.text), UNUSED)

<P><STRONG><a name="[ad]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, aeabi_sdiv.o(.text), UNUSED)

<P><STRONG><a name="[84]"></a>__aeabi_uidivmod</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, aeabi_sdiv.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Init
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RST_CLK_GetClocksFreq
</UL>

<P><STRONG><a name="[ae]"></a>__aeabi_idiv</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, aeabi_sdiv.o(.text), UNUSED)

<P><STRONG><a name="[af]"></a>__aeabi_idivmod</STRONG> (Thumb, 326 bytes, Stack size 8 bytes, aeabi_sdiv.o(.text), UNUSED)

<P><STRONG><a name="[b0]"></a>__use_two_region_memory</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[b1]"></a>__rt_heap_escrow$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[b2]"></a>__rt_heap_expand$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[4a]"></a>_printf_int_common</STRONG> (Thumb, 176 bytes, Stack size 40 bytes, _printf_intcommon.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_int_common
</UL>
<BR>[Calls]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding (Weak Reference)
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding (Weak Reference)
</UL>
<BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_hex
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[44]"></a>_printf_char_common</STRONG> (Thumb, 32 bytes, Stack size 64 bytes, _printf_char_common.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>
<BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>

<P><STRONG><a name="[2b]"></a>_sputc</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, _sputc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> noretval__2sprintf.o(.text)
</UL>
<P><STRONG><a name="[49]"></a>__rt_udiv10</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, rtudiv10.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[39]"></a>__user_setup_stackheap</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, sys_stackheap_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_initial_stackheap
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perproc_libspace
</UL>
<BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_sh
</UL>

<P><STRONG><a name="[3e]"></a>exit</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, exit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = exit
</UL>
<BR>[Calls]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_call_atexit_fns (Weak Reference)
</UL>
<BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[b3]"></a>__user_libspace</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[4d]"></a>__user_perproc_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[b4]"></a>__user_perthread_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[42]"></a>_sys_exit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sys_exit.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_exit
</UL>

<P><STRONG><a name="[b5]"></a>__I$use$semihosting</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[b6]"></a>__use_no_semihosting_swi</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[1c]"></a>ADC_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, mdr1986ve1t_it.o(i.ADC_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr32f1qi.o(RESET)
</UL>
<P><STRONG><a name="[b7]"></a>__semihosting_library_function</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, indicate_semi.o(.text), UNUSED)

<P><STRONG><a name="[15]"></a>ARINC429R_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, mdr1986ve1t_it.o(i.ARINC429R_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr32f1qi.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>ARINC429T1_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, mdr1986ve1t_it.o(i.ARINC429T1_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr32f1qi.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>ARINC429T2_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, mdr1986ve1t_it.o(i.ARINC429T2_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr32f1qi.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>ARINC429T3_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, mdr1986ve1t_it.o(i.ARINC429T3_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr32f1qi.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>ARINC429T4_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, mdr1986ve1t_it.o(i.ARINC429T4_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr32f1qi.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>BKP_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, mdr1986ve1t_it.o(i.BKP_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr32f1qi.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>BUSY_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, mdr1986ve1t_it.o(i.BUSY_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr32f1qi.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>CAN1_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, mdr1986ve1t_it.o(i.CAN1_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr32f1qi.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>CAN2_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, mdr1986ve1t_it.o(i.CAN2_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr32f1qi.o(RESET)
</UL>
<P><STRONG><a name="[51]"></a>Check_Voltage</STRONG> (Thumb, 122 bytes, Stack size 16 bytes, pins.o(i.Check_Voltage))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Check_Voltage
</UL>
<BR>[Calls]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_ReadInputDataBit
</UL>
<BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[5f]"></a>DBG_LoLevel_Init</STRONG> (Thumb, 110 bytes, Stack size 48 bytes, uart_func.o(i.DBG_LoLevel_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = DBG_LoLevel_Init &rArr; UART_Init &rArr; RST_CLK_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Init
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Cmd
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_BRGInit
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_StructInit
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_Init
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RST_CLK_PCLKcmd
</UL>
<BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[65]"></a>DBG_PutString</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, uart_func.o(i.DBG_PutString))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = DBG_PutString
</UL>
<BR>[Calls]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SendData
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_GetFlagStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MIL_STD_1553B1_IRQHandler
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitRxMIL1553B
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Module_Address
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[10]"></a>DMA_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, mdr1986ve1t_it.o(i.DMA_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr32f1qi.o(RESET)
</UL>
<P><STRONG><a name="[68]"></a>DelayMs</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, xtick.o(i.DelayMs))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = DelayMs &rArr; GetXTick &rArr; GetRawXTick
</UL>
<BR>[Calls]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetXTick
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Module_Address
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[5a]"></a>EEPROM_SetLatency</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, mdr32fxqi_eeprom.o(i.EEPROM_SetLatency))
<BR><BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClockConfigure
</UL>

<P><STRONG><a name="[1d]"></a>ETHERNET_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, mdr1986ve1t_it.o(i.ETHERNET_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr32f1qi.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>EXT_INT1_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, mdr1986ve1t_it.o(i.EXT_INT1_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr32f1qi.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>EXT_INT2_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, mdr1986ve1t_it.o(i.EXT_INT2_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr32f1qi.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>EXT_INT3_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, mdr1986ve1t_it.o(i.EXT_INT3_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr32f1qi.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>EXT_INT4_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, mdr1986ve1t_it.o(i.EXT_INT4_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr32f1qi.o(RESET)
</UL>
<P><STRONG><a name="[69]"></a>GetXTick</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, xtick.o(i.GetXTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = GetXTick &rArr; GetRawXTick
</UL>
<BR>[Calls]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetRawXTick
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelayMs
</UL>

<P><STRONG><a name="[6c]"></a>Get_Module_Address</STRONG> (Thumb, 114 bytes, Stack size 56 bytes, pins.o(i.Get_Module_Address))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = Get_Module_Address &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pins_Address_Init
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_ReadInputDataBit
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelayMs
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DBG_PutString
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitRxMIL1553B
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[7]"></a>HardFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, mdr1986ve1t_it.o(i.HardFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr32f1qi.o(RESET)
</UL>
<P><STRONG><a name="[6f]"></a>InitBiLED</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, pins.o(i.InitBiLED))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = InitBiLED &rArr; InitLED_Pin &rArr; PORT_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitLED_Pin
</UL>
<BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[71]"></a>InitMIL1553B_RT</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, mil1553b_rt.o(i.InitMIL1553B_RT))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + Unknown Stack Size
<LI>Call Chain = InitMIL1553B_RT &rArr; InitRxMIL1553B &rArr; Get_Module_Address &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitRxMIL1553B
</UL>
<BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[79]"></a>InitXTick</STRONG> (Thumb, 106 bytes, Stack size 40 bytes, xtick.o(i.InitXTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = InitXTick &rArr; TIMER_CntInit
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_ITConfig
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_DeInit
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_CntStructInit
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_CntInit
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_Cmd
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_BRGInit
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPriority
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EnableIRQ
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RST_CLK_PCLKcmd
</UL>
<BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[c]"></a>MIL_STD_1553B1_IRQHandler</STRONG> (Thumb, 180 bytes, Stack size 8 bytes, mil1553b_rt.o(i.MIL_STD_1553B1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = MIL_STD_1553B1_IRQHandler &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DBG_PutString
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr32f1qi.o(RESET)
</UL>
<P><STRONG><a name="[74]"></a>MIL_STD_1553_BRGInit</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, mdr32fxqi_mil_std_1553.o(i.MIL_STD_1553_BRGInit))
<BR><BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitRxMIL1553B
</UL>

<P><STRONG><a name="[78]"></a>MIL_STD_1553_Cmd</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, mdr32fxqi_mil_std_1553.o(i.MIL_STD_1553_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitRxMIL1553B
</UL>

<P><STRONG><a name="[73]"></a>MIL_STD_1553_DeInit</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, mdr32fxqi_mil_std_1553.o(i.MIL_STD_1553_DeInit))
<BR><BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitRxMIL1553B
</UL>

<P><STRONG><a name="[76]"></a>MIL_STD_1553_Init</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, mdr32fxqi_mil_std_1553.o(i.MIL_STD_1553_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = MIL_STD_1553_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitRxMIL1553B
</UL>

<P><STRONG><a name="[75]"></a>MIL_STD_1553xStructInit</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, mdr32fxqi_mil_std_1553.o(i.MIL_STD_1553xStructInit))
<BR><BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitRxMIL1553B
</UL>

<P><STRONG><a name="[6]"></a>NMI_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, mdr1986ve1t_it.o(i.NMI_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr32f1qi.o(RESET)
</UL>
<P><STRONG><a name="[61]"></a>PORT_Init</STRONG> (Thumb, 222 bytes, Stack size 56 bytes, mdr32fxqi_port.o(i.PORT_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = PORT_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitRxMIL1553B
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pins_Address_Init
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitLED_Pin
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pins_CheckVoltage_Init
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DBG_LoLevel_Init
</UL>

<P><STRONG><a name="[52]"></a>PORT_ReadInputDataBit</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, mdr32fxqi_port.o(i.PORT_ReadInputDataBit))
<BR><BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Module_Address
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_Voltage
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[86]"></a>PORT_ResetBits</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, mdr32fxqi_port.o(i.PORT_ResetBits))
<BR><BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[85]"></a>PORT_SetBits</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, mdr32fxqi_port.o(i.PORT_SetBits))
<BR><BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[60]"></a>PORT_StructInit</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, mdr32fxqi_port.o(i.PORT_StructInit))
<BR><BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitRxMIL1553B
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pins_Address_Init
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitLED_Pin
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pins_CheckVoltage_Init
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DBG_LoLevel_Init
</UL>

<P><STRONG><a name="[16]"></a>POWER_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, mdr1986ve1t_it.o(i.POWER_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr32f1qi.o(RESET)
</UL>
<P><STRONG><a name="[9]"></a>PendSV_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, mdr1986ve1t_it.o(i.PendSV_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr32f1qi.o(RESET)
</UL>
<P><STRONG><a name="[81]"></a>Pins_CheckVoltage_Init</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, pins.o(i.Pins_CheckVoltage_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = Pins_CheckVoltage_Init &rArr; PORT_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_StructInit
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_Init
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RST_CLK_PCLKcmd
</UL>
<BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[57]"></a>RST_CLK_CPU_PLLcmd</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, mdr32fxqi_rst_clk.o(i.RST_CLK_CPU_PLLcmd))
<BR><BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClockConfigure
</UL>

<P><STRONG><a name="[56]"></a>RST_CLK_CPU_PLLconfig</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, mdr32fxqi_rst_clk.o(i.RST_CLK_CPU_PLLconfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RST_CLK_CPU_PLLconfig
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClockConfigure
</UL>

<P><STRONG><a name="[58]"></a>RST_CLK_CPU_PLLstatus</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, mdr32fxqi_rst_clk.o(i.RST_CLK_CPU_PLLstatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = RST_CLK_CPU_PLLstatus &rArr; RST_CLK_GetFlagStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RST_CLK_GetFlagStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClockConfigure
</UL>

<P><STRONG><a name="[5c]"></a>RST_CLK_CPU_PLLuse</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, mdr32fxqi_rst_clk.o(i.RST_CLK_CPU_PLLuse))
<BR><BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClockConfigure
</UL>

<P><STRONG><a name="[5b]"></a>RST_CLK_CPUclkPrescaler</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, mdr32fxqi_rst_clk.o(i.RST_CLK_CPUclkPrescaler))
<BR><BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClockConfigure
</UL>

<P><STRONG><a name="[5d]"></a>RST_CLK_CPUclkSelection</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, mdr32fxqi_rst_clk.o(i.RST_CLK_CPUclkSelection))
<BR><BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClockConfigure
</UL>

<P><STRONG><a name="[83]"></a>RST_CLK_GetClocksFreq</STRONG> (Thumb, 494 bytes, Stack size 64 bytes, mdr32fxqi_rst_clk.o(i.RST_CLK_GetClocksFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = RST_CLK_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Init
</UL>

<P><STRONG><a name="[82]"></a>RST_CLK_GetFlagStatus</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, mdr32fxqi_rst_clk.o(i.RST_CLK_GetFlagStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RST_CLK_GetFlagStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RST_CLK_HSEstatus
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RST_CLK_CPU_PLLstatus
</UL>

<P><STRONG><a name="[54]"></a>RST_CLK_HSEconfig</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, mdr32fxqi_rst_clk.o(i.RST_CLK_HSEconfig))
<BR><BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClockConfigure
</UL>

<P><STRONG><a name="[55]"></a>RST_CLK_HSEstatus</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, mdr32fxqi_rst_clk.o(i.RST_CLK_HSEstatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = RST_CLK_HSEstatus &rArr; RST_CLK_GetFlagStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RST_CLK_GetFlagStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClockConfigure
</UL>

<P><STRONG><a name="[59]"></a>RST_CLK_PCLKcmd</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, mdr32fxqi_rst_clk.o(i.RST_CLK_PCLKcmd))
<BR><BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitRxMIL1553B
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pins_Address_Init
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitLED_Pin
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pins_CheckVoltage_Init
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitXTick
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DBG_LoLevel_Init
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClockConfigure
</UL>

<P><STRONG><a name="[13]"></a>SSP1_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, mdr1986ve1t_it.o(i.SSP1_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr32f1qi.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>SSP2_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, mdr1986ve1t_it.o(i.SSP2_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr32f1qi.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>SSP3_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, mdr1986ve1t_it.o(i.SSP3_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr32f1qi.o(RESET)
</UL>
<P><STRONG><a name="[8]"></a>SVC_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, mdr1986ve1t_it.o(i.SVC_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr32f1qi.o(RESET)
</UL>
<P><STRONG><a name="[5e]"></a>SystemCoreClockUpdate</STRONG> (Thumb, 140 bytes, Stack size 24 bytes, system_mdr32f1qi.o(i.SystemCoreClockUpdate))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SystemCoreClockUpdate
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClockConfigure
</UL>

<P><STRONG><a name="[29]"></a>SystemInit</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, system_mdr32f1qi.o(i.SystemInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SystemInit &rArr; SystemCoreClockUpdate
</UL>
<BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
</UL>
<BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr32f1qi.o(.text)
</UL>
<P><STRONG><a name="[19]"></a>TIMER1_IRQHandler</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, xtick.o(i.TIMER1_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr32f1qi.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>TIMER4_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, mdr1986ve1t_it.o(i.TIMER4_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr32f1qi.o(RESET)
</UL>
<P><STRONG><a name="[7d]"></a>TIMER_BRGInit</STRONG> (Thumb, 142 bytes, Stack size 8 bytes, mdr32fxqi_timer.o(i.TIMER_BRGInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIMER_BRGInit
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitXTick
</UL>

<P><STRONG><a name="[80]"></a>TIMER_Cmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, mdr32fxqi_timer.o(i.TIMER_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitXTick
</UL>

<P><STRONG><a name="[7c]"></a>TIMER_CntInit</STRONG> (Thumb, 58 bytes, Stack size 12 bytes, mdr32fxqi_timer.o(i.TIMER_CntInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = TIMER_CntInit
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitXTick
</UL>

<P><STRONG><a name="[7b]"></a>TIMER_CntStructInit</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, mdr32fxqi_timer.o(i.TIMER_CntStructInit))
<BR><BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitXTick
</UL>

<P><STRONG><a name="[7a]"></a>TIMER_DeInit</STRONG> (Thumb, 86 bytes, Stack size 0 bytes, mdr32fxqi_timer.o(i.TIMER_DeInit))
<BR><BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitXTick
</UL>

<P><STRONG><a name="[7e]"></a>TIMER_ITConfig</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, mdr32fxqi_timer.o(i.TIMER_ITConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIMER_ITConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitXTick
</UL>

<P><STRONG><a name="[11]"></a>UART1_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, mdr1986ve1t_it.o(i.UART1_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr32f1qi.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>UART2_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, mdr1986ve1t_it.o(i.UART2_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr32f1qi.o(RESET)
</UL>
<P><STRONG><a name="[63]"></a>UART_BRGInit</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, mdr32fxqi_uart.o(i.UART_BRGInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UART_BRGInit
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DBG_LoLevel_Init
</UL>

<P><STRONG><a name="[64]"></a>UART_Cmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, mdr32fxqi_uart.o(i.UART_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DBG_LoLevel_Init
</UL>

<P><STRONG><a name="[66]"></a>UART_GetFlagStatus</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, mdr32fxqi_uart.o(i.UART_GetFlagStatus))
<BR><BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DBG_PutString
</UL>

<P><STRONG><a name="[62]"></a>UART_Init</STRONG> (Thumb, 186 bytes, Stack size 64 bytes, mdr32fxqi_uart.o(i.UART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = UART_Init &rArr; RST_CLK_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RST_CLK_GetClocksFreq
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DBG_LoLevel_Init
</UL>

<P><STRONG><a name="[67]"></a>UART_SendData</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, mdr32fxqi_uart.o(i.UART_SendData))
<BR><BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DBG_PutString
</UL>

<P><STRONG><a name="[d]"></a>USB_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, mdr1986ve1t_it.o(i.USB_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr32f1qi.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>WWDG_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, mdr1986ve1t_it.o(i.WWDG_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr32f1qi.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>main</STRONG> (Thumb, 124 bytes, Stack size 0 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + Unknown Stack Size
<LI>Call Chain = main &rArr; InitMIL1553B_RT &rArr; InitRxMIL1553B &rArr; Get_Module_Address &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pins_CheckVoltage_Init
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_SetBits
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_ResetBits
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_ReadInputDataBit
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitXTick
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitMIL1553B_RT
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitBiLED
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Module_Address
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelayMs
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DBG_PutString
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DBG_LoLevel_Init
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_Voltage
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClockConfigure
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[53]"></a>ClockConfigure</STRONG> (Thumb, 136 bytes, Stack size 8 bytes, main.o(i.ClockConfigure))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ClockConfigure &rArr; SystemCoreClockUpdate
</UL>
<BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RST_CLK_PCLKcmd
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RST_CLK_HSEstatus
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RST_CLK_HSEconfig
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RST_CLK_CPUclkSelection
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RST_CLK_CPUclkPrescaler
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RST_CLK_CPU_PLLuse
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RST_CLK_CPU_PLLstatus
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RST_CLK_CPU_PLLconfig
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RST_CLK_CPU_PLLcmd
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_SetLatency
</UL>
<BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[70]"></a>InitLED_Pin</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, pins.o(i.InitLED_Pin))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = InitLED_Pin &rArr; PORT_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_StructInit
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_Init
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RST_CLK_PCLKcmd
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitBiLED
</UL>

<P><STRONG><a name="[6e]"></a>Pins_Address_Init</STRONG> (Thumb, 68 bytes, Stack size 32 bytes, pins.o(i.Pins_Address_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = Pins_Address_Init &rArr; PORT_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_StructInit
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_Init
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RST_CLK_PCLKcmd
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Module_Address
</UL>

<P><STRONG><a name="[6a]"></a>GetRawXTick</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, xtick.o(i.GetRawXTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GetRawXTick
</UL>
<BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetXTick
</UL>

<P><STRONG><a name="[6b]"></a>NVIC_EnableIRQ</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, xtick.o(i.NVIC_EnableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetRawXTick
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitXTick
</UL>

<P><STRONG><a name="[7f]"></a>NVIC_SetPriority</STRONG> (Thumb, 110 bytes, Stack size 8 bytes, xtick.o(i.NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitXTick
</UL>

<P><STRONG><a name="[72]"></a>InitRxMIL1553B</STRONG> (Thumb, 296 bytes, Stack size 40 bytes, mil1553b_rt.o(i.InitRxMIL1553B))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = InitRxMIL1553B &rArr; Get_Module_Address &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MIL_STD_1553xStructInit
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MIL_STD_1553_Init
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MIL_STD_1553_DeInit
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MIL_STD_1553_Cmd
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MIL_STD_1553_BRGInit
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPriority
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_StructInit
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_Init
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RST_CLK_PCLKcmd
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Module_Address
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DBG_PutString
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitMIL1553B_RT
</UL>

<P><STRONG><a name="[77]"></a>NVIC_SetPriority</STRONG> (Thumb, 110 bytes, Stack size 8 bytes, mil1553b_rt.o(i.NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitRxMIL1553B
</UL>

<P><STRONG><a name="[2c]"></a>_printf_input_char</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, _printf_char_common.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> _printf_char_common.o(.text)
</UL><P>
<H3>
Undefined Global Symbols
</H3>
<P><STRONG><a name="[4f]"></a>_call_atexit_fns</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[4c]"></a>_printf_post_padding</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>

<P><STRONG><a name="[4b]"></a>_printf_pre_padding</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>

<P><STRONG><a name="[47]"></a>_printf_truncate_signed</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[48]"></a>_printf_truncate_unsigned</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_hex
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>
<HR></body></html>
